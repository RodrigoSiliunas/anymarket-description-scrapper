"""
==========================================================================
 ‚û† Data Requester Module
 ‚û† Section By: Rodrigo Siliunas
 ‚û† Related system: Web Scraping / Selenium
==========================================================================
"""

import os
import time
import json
import hashlib
from typing import List, Dict, Optional, Any
from pathlib import Path

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from bs4 import BeautifulSoup

from app.configurations.configurations import ROOT_PATH


class DataRequester:
    """
    Classe respons√°vel pela extra√ß√£o de dados de documenta√ß√£o de APIs
    utilizando Selenium WebDriver e BeautifulSoup4.
    """

    def __init__(
        self,
        headless: bool = True,
        window_size: tuple = (1920, 1080),
        page_load_timeout: int = 30,
        implicit_wait: int = 10,
        max_retries: int = 3,
        delay_between_requests: float = 1.0
    ):
        """
        Inicializa o DataRequester com configura√ß√µes do Selenium.
        """
        self.headless = headless
        self.window_size = window_size
        self.page_load_timeout = page_load_timeout
        self.implicit_wait = implicit_wait
        self.max_retries = max_retries
        self.delay_between_requests = delay_between_requests
        
        self.driver: Optional[webdriver.Chrome] = None
        self.output_dir = Path(ROOT_PATH) / "app" / "assets"
        self.output_dir.mkdir(parents=True, exist_ok=True)

    def _setup_chrome_options(self) -> Options:
        """Configura as op√ß√µes do Chrome WebDriver."""
        chrome_options = Options()
        
        if self.headless:
            chrome_options.add_argument("--headless")
        
        chrome_options.add_argument(f"--window-size={self.window_size[0]},{self.window_size[1]}")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-web-security")
        
        return chrome_options

    def initialize_driver(self) -> None:
        """Inicializa o driver do Chrome."""
        try:
            chrome_options = self._setup_chrome_options()
            self.driver = webdriver.Chrome(options=chrome_options)
            self.driver.set_page_load_timeout(self.page_load_timeout)
            self.driver.implicitly_wait(self.implicit_wait)
            
            print(f"‚úÖ Driver Chrome inicializado com sucesso!")
            print(f"   Modo headless: {self.headless}")
            
        except WebDriverException as e:
            print(f"‚ùå Erro ao inicializar o driver Chrome: {e}")
            raise

    def close_driver(self) -> None:
        """Fecha o driver do Chrome."""
        if self.driver:
            try:
                self.driver.quit()
                print("‚úÖ Driver Chrome fechado com sucesso!")
            except Exception as e:
                print(f"‚ö†Ô∏è Aviso ao fechar driver: {e}")
            finally:
                self.driver = None

    def is_driver_active(self) -> bool:
        """Verifica se o driver est√° ativo."""
        if not self.driver:
            return False
        try:
            _ = self.driver.current_url
            return True
        except Exception:
            return False

    def __enter__(self):
        """Context manager entry."""
        self.initialize_driver()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit."""
        self.close_driver()

    def extract_api_documentation(self, tables_data: List[Dict[str, str]]) -> Dict[str, List[Dict[str, str]]]:
        """Extrai a documenta√ß√£o de campos de API."""
        if not self.is_driver_active():
            print("‚ö†Ô∏è Driver n√£o est√° ativo. Inicializando...")
            self.initialize_driver()

        extracted_data = {}

        for table_info in tables_data:
            table_name = table_info.get("table")
            url = table_info.get("url")

            if not table_name or not url:
                print(f"‚ùå Dados inv√°lidos: {table_info}")
                continue

            print(f"üîç Processando tabela: {table_name}")
            print(f"üåê URL: {url}")

            fields_data = self._extract_fields_from_url(url, table_name)

            if fields_data:
                extracted_data[table_name] = fields_data
                print(f"‚úÖ {len(fields_data)} campos extra√≠dos para '{table_name}'")
                self._save_to_json(table_name, fields_data)
            else:
                print(f"‚ùå Nenhum campo extra√≠do para '{table_name}'")
                extracted_data[table_name] = []

            if self.delay_between_requests > 0:
                print(f"‚è±Ô∏è Aguardando {self.delay_between_requests}s...")
                time.sleep(self.delay_between_requests)

        return extracted_data

    def _extract_fields_from_url(self, url: str, table_name: str) -> List[Dict[str, str]]:
        """Extrai os campos de documenta√ß√£o de uma URL espec√≠fica."""
        for attempt in range(self.max_retries):
            try:
                print(f"üîÑ Tentativa {attempt + 1}/{self.max_retries} para '{table_name}'")

                print("üåê Acessando URL e aguardando carregamento...")
                self.driver.get(url)

                WebDriverWait(self.driver, 20).until(
                    EC.presence_of_element_located((By.TAG_NAME, "body"))
                )
                print("‚úÖ P√°gina carregada")
                time.sleep(5)

                two_column_left = self._find_two_column_left_element()
                if not two_column_left:
                    print("‚ùå Elemento two-column-left n√£o encontrado")
                    continue

                self._expand_collapsed_elements_in_container(two_column_left)
                fields_data = self._extract_fields_from_container(two_column_left)

                if fields_data:
                    return fields_data
                else:
                    print(f"‚ö†Ô∏è Nenhum campo encontrado na tentativa {attempt + 1}")

            except TimeoutException:
                print(f"‚è∞ Timeout na tentativa {attempt + 1} para '{table_name}'")
            except Exception as e:
                print(f"‚ùå Erro na tentativa {attempt + 1} para '{table_name}': {e}")

            if attempt < self.max_retries - 1:
                print(f"‚è±Ô∏è Aguardando 5s antes da pr√≥xima tentativa...")
                time.sleep(5)

        print(f"‚ùå Falha ao extrair dados de '{table_name}' ap√≥s {self.max_retries} tentativas")
        return []

    def _find_two_column_left_element(self):
        """Localiza o elemento two-column-left espec√≠fico."""
        try:
            print("üîç Procurando elemento two-column-left...")
            element = self.driver.find_element(By.CSS_SELECTOR, 'div[data-testid="two-column-left"]')
            
            if element:
                print("‚úÖ Elemento two-column-left encontrado")
                self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'start'});", element)
                time.sleep(2)
                return element
            else:
                print("‚ùå Elemento two-column-left n√£o encontrado")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro ao buscar elemento two-column-left: {e}")
            return None

    def _expand_collapsed_elements_in_container(self, container_element):
        """
        NOVA FUNCIONALIDADE: Expande especificamente elementos no cont√™iner 'content' 
        que vem AP√ìS o segundo schema-row (conforme solicitado pelo usu√°rio).
        """
        try:
            print("üîç Iniciando expans√£o focada no cont√™iner 'content' (ap√≥s segundo schema-row)...")
            
            expanded_count = 0
            max_expansions = 50
            clicked_elements = set()
            
            # Busca por elementos schema-row para identificar a estrutura
            schema_rows = container_element.find_elements(By.CSS_SELECTOR, 'div[data-test="schema-row"]')
            print(f"üìä Encontrados {len(schema_rows)} elementos schema-row")
            
            if len(schema_rows) < 2:
                print("‚ö†Ô∏è Menos de 2 schema-rows encontrados, voltando para m√©todo original...")
                return self._expand_collapsed_elements_original(container_element)
            
            # Localiza o segundo schema-row
            second_schema_row = schema_rows[1]
            print("üéØ Localizando cont√™iner 'content' ap√≥s o segundo schema-row...")
            
            # Busca pelo elemento data-level="1" que vem AP√ìS o segundo schema-row
            content_container = None
            try:
                # Usa XPath para encontrar o pr√≥ximo elemento data-level="1" ap√≥s o segundo schema-row
                content_container = second_schema_row.find_element(By.XPATH, 
                    "./following-sibling::*[contains(@data-level, '1')] | " +
                    "./parent::*/following-sibling::*[contains(@data-level, '1')] | " +
                    "./ancestor::*[1]/following-sibling::*[contains(@data-level, '1')]")
                
                if content_container:
                    print("‚úÖ Cont√™iner 'content' encontrado ap√≥s segundo schema-row!")
                else:
                    raise Exception("Cont√™iner n√£o encontrado")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è N√£o foi poss√≠vel localizar cont√™iner content espec√≠fico: {e}")
                print("üîÑ Buscando todos os cont√™ineres data-level='1' como fallback...")
                
                # Fallback: busca todos os cont√™ineres data-level="1"
                level_1_containers = container_element.find_elements(By.CSS_SELECTOR, 'div[data-level="1"]')
                if len(level_1_containers) >= 2:
                    # Assume que o cont√™iner content √© o segundo
                    content_container = level_1_containers[1] if len(level_1_containers) > 1 else level_1_containers[0]
                    print(f"üì¶ Usando cont√™iner data-level='1' (√≠ndice 1) como content")
                else:
                    return self._expand_collapsed_elements_original(container_element)
            
            if not content_container:
                print("‚ùå Cont√™iner content n√£o encontrado")
                return self._expand_collapsed_elements_original(container_element)
            
            # Foca especificamente no cont√™iner content encontrado
            print("üìã Processando cont√™iner 'content' espec√≠fico...")
            
            # Scroll suave at√© o cont√™iner
            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", content_container)
            time.sleep(1.5)
            
            # Busca por elementos clic√°veis com setas dentro deste cont√™iner espec√≠fico
            clickable_elements = content_container.find_elements(By.CSS_SELECTOR, 
                'div[role="button"] i[class*="chevron-right"], ' +
                'div.sl-cursor-pointer i[class*="chevron-right"], ' +
                '[tabindex="0"] i[class*="chevron-right"], ' +
                'i.fa-chevron-right, i.fal.fa-chevron-right, i.far.fa-chevron-right, i.fas.fa-chevron-right')
            
            print(f"üéØ {len(clickable_elements)} elementos com setas encontrados no cont√™iner content")
            
            # DEBUG: Vamos tamb√©m tentar buscar no cont√™iner pai (toda a p√°gina)
            all_page_chevrons = container_element.find_elements(By.CSS_SELECTOR, 
                'i[class*="chevron-right"]')
            print(f"üîç DEBUG: {len(all_page_chevrons)} elementos chevron encontrados na p√°gina inteira")
            
            for element_index, arrow_element in enumerate(clickable_elements):
                if expanded_count >= max_expansions:
                    break
                    
                try:
                    if not arrow_element.is_displayed():
                        continue
                        
                    element_id = self._get_element_identifier(arrow_element)
                    if element_id in clicked_elements:
                        print(f"     üõ°Ô∏è SEGURAN√áA: Elemento j√° clicado, pulando...")
                        continue
                    
                    clickable_parent = arrow_element.find_element(By.XPATH, 
                        "./ancestor::div[@role='button' or contains(@class, 'sl-cursor-pointer') or @tabindex='0'][1]")
                    if not clickable_parent:
                        continue
                        
                    print(f"   üñ±Ô∏è Clicando em elemento {element_index + 1} do cont√™iner content")
                    
                    self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", clickable_parent)
                    time.sleep(1.0)
                    
                    fields_before = len(content_container.find_elements(By.CSS_SELECTOR, "[data-test^='property-name']"))
                    
                    click_success = False
                    try:
                        clickable_parent.click()
                        click_success = True
                        print(f"     ‚úÖ Clique direto realizado")
                    except Exception as e1:
                        try:
                            self.driver.execute_script("arguments[0].click();", clickable_parent)
                            click_success = True
                            print(f"     ‚úÖ Clique JS realizado")
                        except Exception as e2:
                            print(f"     ‚ùå Falha no clique: {e2}")
                            continue
                    
                    if click_success:
                        clicked_elements.add(element_id)
                        print(f"     üîí Elemento marcado: {element_id[:30]}...")
                        time.sleep(2.0)
                        
                        fields_after = len(content_container.find_elements(By.CSS_SELECTOR, "[data-test^='property-name']"))
                        if fields_after > fields_before:
                            expanded_count += 1
                            print(f"     üéâ +{fields_after - fields_before} campos expandidos! Total: {expanded_count}")
                        else:
                            print(f"     ‚ÑπÔ∏è Nenhuma expans√£o detectada")
                            
                except Exception as e:
                    print(f"     ‚ùå Erro ao processar elemento: {e}")
                    continue
            
            print(f"\n‚úÖ Expans√£o focada no cont√™iner content finalizada!")
            print(f"   üìà {expanded_count} expans√µes realizadas")
            print(f"   üéØ {len(clicked_elements)} elementos √∫nicos processados")
            print(f"   üõ°Ô∏è Sistema de seguran√ßa ativo")
            
            # NOVA FUNCIONALIDADE: Expandir objetos (field_type="object") que s√£o expans√≠veis
            print(f"\nüîç Fase 2: Procurando elementos 'object' e 'array[object]' expans√≠veis...")
            object_expanded_count = self._expand_object_fields(container_element, clicked_elements)  # Busca na p√°gina inteira
            
            # NOVA FUNCIONALIDADE: Busca espec√≠fica por array[object] e object
            print(f"\nüîç Fase 3: Busca espec√≠fica por elementos array[object] e object...")
            array_object_count = self._expand_array_object_fields(container_element, clicked_elements)  # Busca na p√°gina inteira
            
            expanded_count += object_expanded_count + array_object_count
            
            print("üîô Posicionando no topo para extra√ß√£o...")
            self.driver.execute_script("arguments[0].scrollTop = 0;", container_element)
            time.sleep(2)
            
        except Exception as e:
            print(f"‚ùå Erro durante processo de expans√£o focada: {e}")
            return self._expand_collapsed_elements_original(container_element)

    def _expand_collapsed_elements_original(self, container_element):
        """M√©todo original de expans√£o como fallback."""
        try:
            print("üîÑ Usando m√©todo de expans√£o original como fallback...")
            
            expanded_count = 0
            max_expansions = 50
            clicked_elements = set()
            
            current_scroll = 0
            scroll_step = 200
            container_height = self.driver.execute_script("return arguments[0].scrollHeight;", container_element)
            max_steps = min(int(container_height / scroll_step) + 2, 15)
            
            for step in range(max_steps):
                print(f"üìú Passo {step + 1}/{max_steps} - Posi√ß√£o: {current_scroll}px")
                
                self.driver.execute_script(f"arguments[0].scrollTo({{top: {current_scroll}, behavior: 'smooth'}});", container_element)
                time.sleep(1.8)
                
                collapsed_elements = container_element.find_elements(By.CSS_SELECTOR, '.sl-truncate.sl-text-muted')
                
                if collapsed_elements:
                    print(f"   üéØ {len(collapsed_elements)} elementos encontrados")
                    
                    processed_count = 0
                    for element in collapsed_elements:
                        if processed_count >= 3 or expanded_count >= max_expansions:
                            break
                            
                        try:
                            if not element.is_displayed():
                                continue
                                
                            element_id = self._get_element_identifier(element)
                            if element_id in clicked_elements:
                                continue
                            
                            self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", element)
                            time.sleep(0.8)
                            
                            try:
                                element.click()
                                clicked_elements.add(element_id)
                                expanded_count += 1
                                processed_count += 1
                                print(f"     ‚úÖ Elemento expandido ({expanded_count})")
                                time.sleep(1.5)
                            except:
                                continue
                                
                        except Exception as e:
                            continue
                else:
                    print(f"   ‚ÑπÔ∏è Nenhum elemento na posi√ß√£o atual")
                
                current_scroll += scroll_step
                if current_scroll >= container_height:
                    break
            
            print(f"‚úÖ Expans√£o original finalizada: {expanded_count} elementos expandidos")
            
        except Exception as e:
            print(f"‚ùå Erro no m√©todo original: {e}")

    def _expand_object_fields(self, container_element, clicked_elements):
        """
        NOVA FUNCIONALIDADE: Expande elementos com field_type="object" que s√£o expans√≠veis.
        Identifica elementos expans√≠veis pela presen√ßa da classe 'sl-ml-2' no cont√™iner stack.
        """
        try:
            print("üîç Procurando elementos 'object' expans√≠veis...")

            object_expanded_count = 0
            max_object_expansions = 30

            # NOVA ESTRAT√âGIA: Busca por TODOS os bot√µes de expans√£o na p√°gina
            all_expandable_buttons = container_element.find_elements(By.CSS_SELECTOR, 
                'div[role="button"] i[class*="chevron-right"], ' +
                'div.sl-cursor-pointer i[class*="chevron-right"], ' +
                '[tabindex="0"] i[class*="chevron-right"], ' +
                'button i[class*="chevron-right"], ' +
                'i.fa-chevron-right, i.fal.fa-chevron-right, i.far.fa-chevron-right, i.fas.fa-chevron-right')
            
            print(f"üéØ Encontrados {len(all_expandable_buttons)} bot√µes de expans√£o na p√°gina")
            
            # Filtra apenas elementos que realmente s√£o expans√≠veis e n√£o foram clicados
            valid_buttons = []
            for button_element in all_expandable_buttons:
                try:
                    if not button_element.is_displayed():
                        continue
                        
                    # Verifica se j√° foi clicado
                    element_id = self._get_element_identifier(button_element)
                    if element_id in clicked_elements:
                        continue
                    
                    # Encontra o schema-row pai
                    try:
                        schema_row = button_element.find_element(By.XPATH, 
                            "./ancestor::div[@data-test='schema-row'][1]")
                    except:
                        # Se n√£o encontrar schema-row, tenta um cont√™iner mais gen√©rico
                        try:
                            schema_row = button_element.find_element(By.XPATH, 
                                "./ancestor::div[contains(@class,'sl-') or @data-test][1]")
                        except:
                            continue
                    
                    # Tenta encontrar informa√ß√µes sobre o campo
                    field_name = "unknown"
                    field_type = "unknown"
                    
                    try:
                        name_element = schema_row.find_element(By.CSS_SELECTOR, 
                            '[data-test^="property-name"]')
                        field_name = name_element.text.strip()
                        
                        type_element = schema_row.find_element(By.CSS_SELECTOR, 
                            '[data-test="property-type"]')
                        field_type = type_element.text.strip().lower()
                    except:
                        # Se n√£o conseguir identificar nome/tipo, ainda assim tenta expandir
                        pass
                    
                    valid_buttons.append((button_element, schema_row, field_name, field_type, element_id))
                    
                except Exception as e:
                    continue

            print(f"üì¶ Filtrados {len(valid_buttons)} bot√µes v√°lidos para expans√£o")
            
            # Expande todos os bot√µes v√°lidos
            for button_index, (chevron_button, schema_row_container, field_name, field_type, element_id) in enumerate(valid_buttons):
                if object_expanded_count >= max_object_expansions:
                    break
                    
                try:
                    print(f"   üéØ Expandindo elemento '{field_name}' ({field_type}) [{button_index + 1}/{len(valid_buttons)}]")
                    
                    # Scroll at√© o elemento
                    self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", 
                                             chevron_button)
                    time.sleep(0.8)
                    
                    # Conta campos antes da expans√£o
                    fields_before = len(container_element.find_elements(By.CSS_SELECTOR, "[data-test^='property-name']"))
                    
                    # Encontra o elemento clic√°vel pai
                    try:
                        clickable_parent = chevron_button.find_element(By.XPATH, 
                            "./ancestor::div[@role='button' or contains(@class, 'sl-cursor-pointer') or @tabindex='0'][1]")
                    except:
                        # Se n√£o encontrar, usa o pr√≥prio bot√£o ou pai direto
                        try:
                            clickable_parent = chevron_button.find_element(By.XPATH, "./parent::*")
                        except:
                            clickable_parent = chevron_button
                    
                    # Realiza o clique
                    click_success = False
                    try:
                        clickable_parent.click()
                        click_success = True
                        print(f"     ‚úÖ Clique direto realizado em '{field_name}'")
                    except Exception as e1:
                        try:
                            self.driver.execute_script("arguments[0].click();", clickable_parent)
                            click_success = True
                            print(f"     ‚úÖ Clique JS realizado em '{field_name}'")
                        except Exception as e2:
                            # Tenta clicar diretamente no √≠cone da seta
                            try:
                                self.driver.execute_script("arguments[0].click();", chevron_button)
                                click_success = True
                                print(f"     ‚úÖ Clique direto no √≠cone realizado em '{field_name}'")
                            except Exception as e3:
                                print(f"     ‚ùå Falha total no clique em '{field_name}': {e3}")
                                continue
                    
                    if click_success:
                        clicked_elements.add(element_id)
                        time.sleep(1.5)  # Tempo para expans√£o
                        
                        # Conta campos ap√≥s a expans√£o
                        fields_after = len(container_element.find_elements(By.CSS_SELECTOR, "[data-test^='property-name']"))
                        
                        if fields_after > fields_before:
                            object_expanded_count += 1
                            new_fields = fields_after - fields_before
                            print(f"     üéâ +{new_fields} novos campos encontrados em '{field_name}'!")
                        else:
                            print(f"     ‚ÑπÔ∏è Nenhum campo novo encontrado em '{field_name}' (pode j√° estar expandido)")
                            
                except Exception as e:
                    print(f"     ‚ùå Erro inesperado ao processar '{field_name}': {type(e).__name__}")
                    continue
            
            print(f"\n‚úÖ Expans√£o de elementos finalizada!")
            print(f"   üì¶ {object_expanded_count} elementos expandidos")
            print(f"   üîç {len(valid_buttons)} elementos analisados")
            
            return object_expanded_count
            
        except Exception as e:
            print(f"‚ùå Erro durante expans√£o de elementos: {e}")
            return 0

    def _expand_array_object_fields(self, container_element, clicked_elements):
        """
        Busca espec√≠fica por elementos com tipo 'array[object]' ou 'object' que possuem setas de expans√£o.
        """
        try:
            array_object_expanded_count = 0
            max_expansions = 20
            
            # Busca por todos os elementos que t√™m tipo array[object] ou object
            type_elements = container_element.find_elements(By.CSS_SELECTOR, '[data-test="property-type"]')
            print(f"üîç Encontrados {len(type_elements)} elementos com tipo definido")
            
            # DEBUG: vamos mostrar quais tipos foram encontrados e buscar especificamente por array[object]
            found_types = []
            array_object_elements = []
            for te in type_elements:
                try:
                    type_text = te.text.strip()
                    found_types.append(type_text)
                    
                    # Se encontrar array[object], guardar o elemento
                    if 'array[object]' in type_text.lower():
                        array_object_elements.append(te)
                        
                except:
                    pass
            print(f"üîç Tipos encontrados: {found_types}")
            print(f"üéØ Elementos array[object] encontrados: {len(array_object_elements)}")
            
            # Se n√£o encontrou no cont√™iner atual, vamos buscar na p√°gina inteira
            if len(array_object_elements) == 0:
                print("üîç Buscando array[object] na p√°gina inteira...")
                all_type_elements = self.driver.find_elements(By.CSS_SELECTOR, '[data-test="property-type"]')
                all_found_types = []
                for te in all_type_elements:
                    try:
                        type_text = te.text.strip()
                        all_found_types.append(type_text)
                        if 'array[object]' in type_text.lower():
                            array_object_elements.append(te)
                    except:
                        pass
                print(f"üåê Todos os tipos na p√°gina: {all_found_types}")
                print(f"üéØ Total array[object] na p√°gina: {len(array_object_elements)}")
            
            # Agora vamos processar especificamente os elementos array[object] encontrados
            for type_element in array_object_elements:
                if array_object_expanded_count >= max_expansions:
                    break
                    
                try:
                    field_type = type_element.text.strip().lower()
                    
                    # Procura especificamente por array[object] e object
                    if 'array[object]' in field_type or field_type == 'object':
                        
                        # Encontra o schema-row pai deste elemento
                        try:
                            schema_row = type_element.find_element(By.XPATH, 
                                "./ancestor::div[@data-test='schema-row'][1]")
                        except:
                            # Fallback para cont√™iner gen√©rico
                            try:
                                schema_row = type_element.find_element(By.XPATH, 
                                    "./ancestor::div[contains(@class,'sl-stack')][1]")
                            except:
                                continue
                        
                        # Busca por campo nome dentro do mesmo schema-row
                        try:
                            name_element = schema_row.find_element(By.CSS_SELECTOR, 
                                '[data-test^="property-name"]')
                            field_name = name_element.text.strip()
                        except:
                            field_name = "unknown"
                        
                        # Busca por √≠cone de expans√£o dentro do mesmo schema-row
                        try:
                            chevron_icon = schema_row.find_element(By.CSS_SELECTOR, 
                                'i[class*="chevron-right"]')
                            
                            if not chevron_icon.is_displayed():
                                continue
                                
                            # Verifica se j√° foi clicado
                            element_id = self._get_element_identifier(chevron_icon)
                            if element_id in clicked_elements:
                                print(f"     üõ°Ô∏è Campo '{field_name}' ({field_type}) j√° processado")
                                continue
                            
                            print(f"   üéØ Expandindo campo '{field_name}' ({field_type})")
                            
                            # Encontra o elemento clic√°vel pai
                            try:
                                clickable_parent = chevron_icon.find_element(By.XPATH, 
                                    "./ancestor::div[@role='button' or @tabindex='0' or contains(@class, 'sl-cursor-pointer')][1]")
                            except:
                                clickable_parent = chevron_icon.find_element(By.XPATH, "./parent::*")
                            
                            # Scroll at√© o elemento
                            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", 
                                                     clickable_parent)
                            time.sleep(1.0)
                            
                            # Conta campos antes da expans√£o
                            fields_before = len(container_element.find_elements(By.CSS_SELECTOR, "[data-test^='property-name']"))
                            
                            # Realiza o clique
                            click_success = False
                            try:
                                clickable_parent.click()
                                click_success = True
                                print(f"     ‚úÖ Clique direto realizado em '{field_name}'")
                            except Exception as e1:
                                try:
                                    self.driver.execute_script("arguments[0].click();", clickable_parent)
                                    click_success = True
                                    print(f"     ‚úÖ Clique JS realizado em '{field_name}'")
                                except Exception as e2:
                                    try:
                                        self.driver.execute_script("arguments[0].click();", chevron_icon)
                                        click_success = True
                                        print(f"     ‚úÖ Clique direto no √≠cone realizado em '{field_name}'")
                                    except Exception as e3:
                                        print(f"     ‚ùå Falha ao clicar em '{field_name}': {e3}")
                                        continue
                            
                            if click_success:
                                clicked_elements.add(element_id)
                                time.sleep(2.0)  # Tempo para expans√£o
                                
                                # Conta campos ap√≥s a expans√£o
                                fields_after = len(container_element.find_elements(By.CSS_SELECTOR, "[data-test^='property-name']"))
                                
                                if fields_after > fields_before:
                                    array_object_expanded_count += 1
                                    new_fields = fields_after - fields_before
                                    print(f"     üéâ +{new_fields} novos campos encontrados em '{field_name}'!")
                                else:
                                    print(f"     ‚ÑπÔ∏è Nenhum campo novo em '{field_name}' (pode j√° estar expandido)")
                            
                        except Exception as chevron_error:
                            # N√£o h√° √≠cone de expans√£o para este campo, √© normal
                            continue
                        
                except Exception as field_error:
                    continue
            
            print(f"\n‚úÖ Busca espec√≠fica por array[object] finalizada!")
            print(f"   üì¶ {array_object_expanded_count} elementos array[object]/object expandidos")
            
            return array_object_expanded_count
            
        except Exception as e:
            print(f"‚ùå Erro durante busca espec√≠fica por array[object]: {e}")
            return 0

    def _get_element_identifier(self, element):
        """Cria um identificador √∫nico para um elemento."""
        try:
            tag_name = element.tag_name
            text_content = element.text[:100] if element.text else ""
            text_content = text_content.replace("\n", " ").strip()
            css_classes = element.get_attribute("class") or ""
            location = element.location
            location_str = f"{location.get('x', 0)},{location.get('y', 0)}"
            
            identifier_parts = [
                f"tag:{tag_name}",
                f"text:{text_content}",
                f"classes:{css_classes}",
                f"loc:{location_str}"
            ]
            
            identifier = "|".join(identifier_parts)
            hash_id = hashlib.md5(identifier.encode()).hexdigest()[:16]
            final_id = f"{hash_id}:{text_content[:30]}"
            
            return final_id
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao criar identificador: {e}")
            return f"fallback_{id(element)}_{hash(str(element))}"

    def _extract_fields_from_container(self, container_element) -> List[Dict[str, str]]:
        """Extrai os dados dos campos do container especificado com prefixa√ß√£o hier√°rquica."""
        try:
            print("üìã Extraindo dados dos campos do container...")
            
            container_html = container_element.get_attribute('outerHTML')
            soup = BeautifulSoup(container_html, 'html.parser')
            
            fields_data = []
            
            # NOVA FUNCIONALIDADE: Busca apenas campos dentro da se√ß√£o "content"
            print("üéØ Localizando se√ß√£o 'content' para extrair apenas campos relevantes...")
            
            # Encontra o elemento "content" como ponto de refer√™ncia
            content_element = None
            content_candidates = soup.find_all(attrs={"data-test": lambda x: x and "property-name" in x})
            
            for candidate in content_candidates:
                if candidate.get_text(strip=True).lower() == "content":
                    content_element = candidate
                    break
            
            if not content_element:
                print("‚ö†Ô∏è Elemento 'content' n√£o encontrado, extraindo todos os campos...")
                return self._extract_all_fields_fallback(soup)
            
            print("‚úÖ Se√ß√£o 'content' encontrada, filtrando campos relevantes...")
            
            # Encontra o cont√™iner pai do elemento content
            content_schema_row = content_element.find_parent("div", {"data-test": lambda x: x and "schema" in x})
            if not content_schema_row:
                print("‚ö†Ô∏è Schema-row do 'content' n√£o encontrado, usando fallback...")
                return self._extract_all_fields_fallback(soup)
            
            # NOVA FUNCIONALIDADE: Processa campos com hierarquia e prefixa√ß√£o
            print("ÔøΩ Processando campos com hierarquia e prefixa√ß√£o...")
            fields_data = self._extract_fields_with_hierarchy(soup, content_schema_row)
            
            return fields_data
            
        except Exception as e:
            print(f"‚ùå Erro durante extra√ß√£o de dados: {e}")
            return []

    def _extract_fields_with_hierarchy(self, soup, content_schema_row) -> List[Dict[str, str]]:
        """
        NOVA FUNCIONALIDADE: Extrai campos aplicando prefixa√ß√£o hier√°rquica.
        
        L√≥gica de filtragem:
        - Se existir campo 'content': extrai apenas campos dentro do content (ignora pagina√ß√£o)
        - Se n√£o existir campo 'content': extrai todos os campos (como categories)
        """
        try:
            print("üîó Iniciando extra√ß√£o com hierarquia baseada em data-level...")
            
            fields_data = []
            processed_fields = set()
            
            # Busca todos os schema-rows na p√°gina
            all_schema_rows = soup.find_all("div", {"data-test": lambda x: x and "schema" in x})
            print(f"üìä Encontrados {len(all_schema_rows)} schema-rows na p√°gina")
            
            # NOVA L√ìGICA: Detecta se existe um campo 'content'
            has_content_field = False
            content_field_index = -1
            
            for i, row in enumerate(all_schema_rows):
                name_element = row.find(attrs={"data-test": lambda x: x and "property-name" in x})
                if name_element:
                    field_name = name_element.get_text(strip=True)
                    if field_name.lower() == "content":
                        has_content_field = True
                        content_field_index = i
                        print(f"‚úÖ Campo 'content' detectado no √≠ndice {i}")
                        break
            
            if has_content_field:
                print("üéØ Modo: Extraindo apenas campos dentro do 'content' (ignorando pagina√ß√£o)")
                # Filtra apenas campos que v√™m AP√ìS o content
                relevant_rows = all_schema_rows[content_field_index:]
            else:
                print("üéØ Modo: Extraindo todos os campos (sem campo 'content' detectado)")
                # Usa todos os schema-rows
                relevant_rows = all_schema_rows
            
            print(f"üìã Processando {len(relevant_rows)} schema-rows relevantes")
            
            # Analisa a hierarquia usando data-level dos elementos pais
            field_hierarchy = []
            
            for row in relevant_rows:
                try:
                    # Encontra o nome do campo
                    name_element = row.find(attrs={"data-test": lambda x: x and "property-name" in x})
                    if not name_element:
                        continue
                    
                    field_name = name_element.get_text(strip=True)
                    if not field_name:
                        continue
                    
                    # Para campos de pagina√ß√£o (mesmo quando n√£o h√° content, evita estes)
                    if field_name.lower() in ["page", "size", "totalelements", "totalpages"]:
                        print(f"üõë Parando extra√ß√£o ao encontrar campo de pagina√ß√£o: '{field_name}'")
                        break
                    
                    # NOVA L√ìGICA: Se temos content, ajusta a hierarquia
                    level = self._detect_level_from_parent(row)
                    
                    # Se detectamos content e estamos processando campos ap√≥s content,
                    # ajusta os n√≠veis para considerar content como n√≠vel pai
                    if has_content_field and field_name.lower() != "content":
                        # Se o campo est√° dentro do content (level > 0), ajusta para considerar content como pai
                        if level > 0:
                            level = level - 1  # Reduz um n√≠vel pois content ser√° o pai
                    
                    field_hierarchy.append((level, field_name, row))
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro ao processar schema-row: {e}")
                    continue
            
            print(f"üèóÔ∏è Constru√≠da hierarquia de {len(field_hierarchy)} campos")
            
            # Debug: mostra a hierarquia detectada
            print("üìã HIERARQUIA DETECTADA:")
            for level, field_name, _ in field_hierarchy:
                indent = "  " * level
                marker = "üè†" if level == 0 else "üì¶" if level == 1 else "üîó"
                print(f"{indent}{marker} {field_name} - N√≠vel {level}")
            
            # Constr√≥i os nomes com prefixa√ß√£o baseada na hierarquia
            parent_stack = []
            
            # Se temos content, n√£o adicionamos prefixo content_ mas mantemos a hierarquia interna
            if has_content_field:
                print("üì¶ Modo content ativo: extraindo campos sem prefixo 'content_' (hierarquia interna mantida)")
            
            for level, field_name, schema_row in field_hierarchy:
                try:
                    # NOVA L√ìGICA: Se temos content, n√£o inclu√≠mos 'content' no stack de prefixos
                    if has_content_field and field_name.lower() != "content":
                        # Ajusta o stack baseado no n√≠vel (sem incluir content no prefixo)
                        while len(parent_stack) > level:
                            removed = parent_stack.pop()
                            print(f"   üîô Removendo '{removed}' do stack (n√≠vel {level})")
                    else:
                        # L√≥gica normal para casos sem content
                        while len(parent_stack) > level:
                            removed = parent_stack.pop()
                            print(f"   üîô Removendo '{removed}' do stack (n√≠vel {level})")
                    
                    # Determina o nome final do campo (sem incluir content no prefixo)
                    if parent_stack and not (has_content_field and field_name.lower() == "content"):
                        prefixed_name = "_".join(parent_stack + [field_name])
                    else:
                        prefixed_name = field_name
                    
                    # Evita duplicatas
                    if prefixed_name in processed_fields:
                        print(f"   ‚ö†Ô∏è Campo duplicado ignorado: {prefixed_name}")
                        continue
                    
                    processed_fields.add(prefixed_name)
                    
                    # Extrai tipo e descri√ß√£o
                    field_type = "unknown"
                    type_element = schema_row.find(attrs={"data-test": "property-type"})
                    if type_element:
                        field_type = type_element.get_text(strip=True)
                    else:
                        # Busca alternativa por spans com tipos
                        type_candidates = schema_row.find_all("span", class_=lambda x: x and "sl-text-muted" in x)
                        for candidate in type_candidates:
                            candidate_text = candidate.get_text(strip=True)
                            if any(type_word in candidate_text.lower() for type_word in ['string', 'number', 'integer', 'boolean', 'array', 'object']):
                                field_type = candidate_text
                                break
                    
                    description = ""
                    desc_element = schema_row.find(attrs={"data-test": "property-description"})
                    if desc_element:
                        description = desc_element.get_text(strip=True)
                    else:
                        desc_candidates = schema_row.find_all(class_=lambda x: x and ("sl-prose" in x or "sl-markdown-viewer" in x or "description" in x))
                        if desc_candidates:
                            description = desc_candidates[0].get_text(strip=True)
                    
                    # Calcula o n√≠vel final para output
                    final_level = level
                    if has_content_field and field_name.lower() != "content":
                        final_level = level  # Mant√©m o n√≠vel original, sem ajustar por content
                    
                    # Adiciona √† lista de campos
                    field_data = {
                        "name": prefixed_name,
                        "description": description,
                        "field_type": field_type,
                        "original_name": field_name,
                        "hierarchy_level": final_level
                    }
                    
                    fields_data.append(field_data)
                    
                    # Log com detalhes da hierarquia
                    if parent_stack and not (has_content_field and field_name.lower() == "content"):
                        hierarchy_path = " -> ".join(parent_stack + [field_name])
                        print(f"‚úÖ Campo extra√≠do: {prefixed_name} ({field_type}) | Hierarquia: {hierarchy_path}")
                    else:
                        print(f"‚úÖ Campo extra√≠do: {prefixed_name} ({field_type}) | N√≠vel raiz")
                    
                    # Se este campo √© um objeto/array que pode ter filhos, adiciona ao stack de pais
                    if field_type.lower() in ["object", "array[object]"] and level < 10:
                        if not (has_content_field and field_name.lower() == "content"):
                            parent_stack.append(field_name)
                            print(f"   üì¶ '{field_name}' adicionado ao stack de pais: {parent_stack}")
                    
                except Exception as e:
                    print(f"‚ùå Erro ao processar campo '{field_name}': {e}")
                    continue
            
            print(f"üéØ Extra√ß√£o hier√°rquica conclu√≠da: {len(fields_data)} campos processados")
            
            # Se temos content, remove o pr√≥prio campo content da lista final
            if has_content_field:
                fields_data = [field for field in fields_data if field['name'].lower() != 'content']
                print(f"üóëÔ∏è Campo 'content' removido da lista final (mantidos apenas os subcampos)")
                print(f"üìã Total final: {len(fields_data)} campos")
            
            return fields_data
            
        except Exception as e:
            print(f"‚ùå Erro na extra√ß√£o hier√°rquica: {e}")
            return self._extract_all_fields_fallback(soup)
    
    def _detect_level_from_parent(self, schema_row):
        """
        Detecta o n√≠vel de hierarquia baseado no data-level do elemento pai.
        Baseado no HTML real onde elementos com data-level="0" s√£o raiz e data-level="1" s√£o filhos.
        """
        try:
            # Busca pelo elemento pai com data-level
            current = schema_row.parent
            max_attempts = 5
            attempt = 0
            
            while current and attempt < max_attempts:
                data_level = current.get("data-level")
                if data_level and data_level.isdigit():
                    level = int(data_level)
                    return level
                
                current = current.parent
                attempt += 1
            
            # Fallback: verifica classes CSS espec√≠ficas
            parent = schema_row.parent
            if parent:
                parent_classes = parent.get("class", [])
                if "sl-ml-7" in parent_classes:
                    return 1
                elif "sl-ml-px" in parent_classes:
                    return 0
            
            # Se n√£o encontrar, assume n√≠vel 0
            return 0
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erro ao detectar n√≠vel do pai: {e}")
            return 0
    
    def _get_field_indentation_level(self, schema_row) -> int:
        """
        Determina o n√≠vel de indenta√ß√£o de um campo baseado na estrutura DOM.
        Prioriza data-level para detectar hierarquia corretamente.
        """
        try:
            # M√©todo 1: Busca data-level no elemento pai ou no pr√≥prio elemento
            current_element = schema_row
            
            # Primeiro, verifica se o pr√≥prio schema-row tem data-level
            data_level = current_element.get("data-level")
            if data_level and data_level.isdigit():
                level = int(data_level)
                return level
            
            # Se n√£o encontrou, busca no elemento pai
            parent_element = current_element.parent
            if parent_element:
                parent_data_level = parent_element.get("data-level")
                if parent_data_level and parent_data_level.isdigit():
                    level = int(parent_data_level)
                    return level
            
            # M√©todo 2: Busca por ancestrais com data-level
            current = schema_row
            for _ in range(5):  # Limita busca
                if current and current.get("data-level"):
                    data_level = current.get("data-level")
                    if data_level.isdigit():
                        return int(data_level)
                current = current.parent if current else None
            
            # M√©todo 3: An√°lise de classes CSS sl-ml-* mais precisa
            # Procura especificamente por sl-ml-7 (n√≠vel 1) e sl-ml-px (n√≠vel 0)
            all_elements = schema_row.find_all()
            for element in all_elements:
                classes = element.get("class", [])
                for cls in classes:
                    if cls == "sl-ml-7":  # Indica n√≠vel 1 baseado no HTML fornecido
                        return 1
                    elif cls == "sl-ml-px":  # Indica n√≠vel 0 baseado no HTML fornecido
                        return 0
            
            # M√©todo 4: Verifica a estrutura de classes CSS do container
            parent_classes = []
            current = schema_row.parent
            if current:
                parent_classes = current.get("class", [])
            
            # Se o pai tem sl-ml-7, este elemento est√° no n√≠vel 1
            if "sl-ml-7" in parent_classes:
                return 1
            elif "sl-ml-px" in parent_classes:
                return 0
            
            # Fallback: Assume n√≠vel 0 (raiz)
            return 0
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erro ao determinar n√≠vel de indenta√ß√£o: {e}")
            return 0  # Fallback para n√≠vel raiz

    def _extract_all_fields_fallback(self, soup) -> List[Dict[str, str]]:
        """M√©todo de fallback para extrair todos os campos quando n√£o conseguir filtrar por content."""
        print("üîÑ Usando m√©todo de extra√ß√£o completa como fallback com hierarquia baseada em data-level...")
        
        try:
            fields_data = []
            processed_fields = set()
            
            # Busca todos os schema-rows
            all_schema_rows = soup.find_all("div", {"data-test": lambda x: x and "schema" in x})
            print(f"üìä Encontrados {len(all_schema_rows)} schema-rows para processar")
            
            # Analisa a hierarquia usando data-level
            field_hierarchy = []
            
            for row in all_schema_rows:
                try:
                    name_element = row.find(attrs={"data-test": lambda x: x and "property-name" in x})
                    if not name_element:
                        continue
                    
                    field_name = name_element.get_text(strip=True)
                    if not field_name:
                        continue
                    
                    # Para campos de pagina√ß√£o
                    if field_name.lower() in ["page", "size", "totalelements", "totalpages"]:
                        continue
                    
                    # Usa a nova detec√ß√£o baseada em data-level do pai
                    level = self._detect_level_from_parent(row)
                    field_hierarchy.append((level, field_name, row))
                    
                except Exception as e:
                    continue
            
            print(f"üèóÔ∏è Constru√≠da hierarquia de {len(field_hierarchy)} campos")
            
            # Debug: mostra a hierarquia detectada no fallback
            print("üìã HIERARQUIA DETECTADA (FALLBACK):")
            for level, field_name, _ in field_hierarchy:
                indent = "  " * level
                print(f"{indent}‚Ä¢ {field_name} - N√≠vel {level}")
            
            # Constr√≥i os nomes com prefixa√ß√£o baseada na hierarquia
            parent_stack = []
            
            for level, field_name, schema_row in field_hierarchy:
                try:
                    # Ajusta o stack de pais baseado no n√≠vel atual
                    while len(parent_stack) > level:
                        parent_stack.pop()
                    
                    # Determina o nome final do campo
                    if parent_stack:
                        prefixed_name = "_".join(parent_stack + [field_name])
                    else:
                        prefixed_name = field_name
                    
                    # Evita duplicatas
                    if prefixed_name in processed_fields:
                        continue
                    processed_fields.add(prefixed_name)
                    
                    # Extrai tipo e descri√ß√£o
                    field_type = "unknown"
                    type_element = schema_row.find(attrs={"data-test": "property-type"})
                    if type_element:
                        field_type = type_element.get_text(strip=True)
                    else:
                        type_candidates = schema_row.find_all("span", class_=lambda x: x and "sl-text-muted" in x)
                        for candidate in type_candidates:
                            candidate_text = candidate.get_text(strip=True)
                            if any(type_word in candidate_text.lower() for type_word in ['string', 'number', 'integer', 'boolean', 'array', 'object']):
                                field_type = candidate_text
                                break
                    
                    description = ""
                    desc_element = schema_row.find(attrs={"data-test": "property-description"})
                    if desc_element:
                        description = desc_element.get_text(strip=True)
                    else:
                        desc_candidates = schema_row.find_all(class_=lambda x: x and ("sl-prose" in x or "sl-markdown-viewer" in x or "description" in x))
                        if desc_candidates:
                            description = desc_candidates[0].get_text(strip=True)
                    
                    field_data = {
                        "name": prefixed_name,
                        "description": description,
                        "field_type": field_type,
                        "original_name": field_name,
                        "hierarchy_level": level
                    }
                    
                    fields_data.append(field_data)
                    
                    # Log com detalhes da hierarquia
                    if parent_stack:
                        hierarchy_path = " -> ".join(parent_stack + [field_name])
                        print(f"‚úÖ Campo extra√≠do: {prefixed_name} ({field_type}) | Hierarquia: {hierarchy_path}")
                    else:
                        print(f"‚úÖ Campo extra√≠do: {prefixed_name} ({field_type}) | N√≠vel raiz")
                    
                    # Se este campo √© um objeto que pode ter filhos, adiciona ao stack
                    if field_type.lower() in ["object", "array[object]"] and level < 10:
                        parent_stack.append(field_name)
                        print(f"   üì¶ '{field_name}' adicionado ao stack de pais: {parent_stack}")
                        
                except Exception as e:
                    continue
            
            print(f"üîÑ Extra√ß√£o fallback conclu√≠da: {len(fields_data)} campos processados")
            return fields_data
            
        except Exception as e:
            print(f"‚ùå Erro no m√©todo de fallback: {e}")
            # Se at√© o fallback falhar, tenta m√©todo simples sem hierarquia
            return self._extract_simple_fields_fallback(soup)
    
    def _extract_simple_fields_fallback(self, soup) -> List[Dict[str, str]]:
        """M√©todo mais simples de extra√ß√£o sem hierarquia como √∫ltimo recurso."""
        print("üîÑ Usando m√©todo simples sem hierarquia como √∫ltimo recurso...")
        
        fields_data = []
        field_name_selectors = [
            "[data-test^='property-name']",
            "[data-testid^='property-name']",
        ]
        
        field_name_elements = []
        for selector in field_name_selectors:
            elements = soup.select(selector)
            field_name_elements.extend(elements)
        
        seen_names = set()
        unique_elements = []
        for element in field_name_elements:
            element_text = element.get_text(strip=True)
            if element_text and element_text not in seen_names:
                seen_names.add(element_text)
                unique_elements.append(element)
        
        for field_element in unique_elements:
            try:
                field_name = field_element.get_text(strip=True)
                
                if not field_name:
                    continue
                
                parent_container = field_element.find_parent("div")
                if not parent_container:
                    continue
                
                for _ in range(3):
                    schema_row = parent_container.find_parent("div", {"data-test": lambda x: x and "schema" in x})
                    if schema_row:
                        parent_container = schema_row
                        break
                    parent_container = parent_container.find_parent("div") or parent_container
                
                field_type = "unknown"
                type_element = parent_container.find(attrs={"data-test": "property-type"})
                if type_element:
                    field_type = type_element.get_text(strip=True)
                else:
                    type_candidates = parent_container.find_all("span", class_=lambda x: x and "sl-text-muted" in x)
                    for candidate in type_candidates:
                        candidate_text = candidate.get_text(strip=True)
                        if any(type_word in candidate_text.lower() for type_word in ['string', 'number', 'integer', 'boolean', 'array', 'object']):
                            field_type = candidate_text
                            break
                
                description = ""
                desc_element = parent_container.find(attrs={"data-test": "property-description"})
                if desc_element:
                    description = desc_element.get_text(strip=True)
                else:
                    desc_candidates = parent_container.find_all(class_=lambda x: x and ("sl-prose" in x or "sl-markdown-viewer" in x or "description" in x))
                    if desc_candidates:
                        description = desc_candidates[0].get_text(strip=True)
                
                field_data = {
                    "name": field_name,
                    "description": description,
                    "field_type": field_type
                }
                
                fields_data.append(field_data)
                
            except Exception as e:
                continue
        
        return fields_data

    def _save_to_json(self, table_name: str, fields_data: List[Dict[str, str]]) -> None:
        """Salva os dados extra√≠dos em um arquivo JSON."""
        try:
            file_path = self.output_dir / f"{table_name}.json"
            
            output_data = {
                "table_name": table_name,
                "extraction_date": time.strftime("%Y-%m-%d %H:%M:%S"),
                "total_fields": len(fields_data),
                "fields": fields_data
            }
            
            with open(file_path, 'w', encoding='utf-8') as file:
                json.dump(output_data, file, indent=4, ensure_ascii=False)
            
            print(f"üíæ Dados salvos em: {file_path}")
            
        except Exception as e:
            print(f"‚ùå Erro ao salvar arquivo JSON: {e}")

    def __del__(self):
        """Destrutor para garantir que o driver seja fechado."""
        self.close_driver()
